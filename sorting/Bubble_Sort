// Bubble sort
In this algorithm, 

traverse from left and compare adjacent elements and the higher one is placed at right side. 
In this way, the largest element is moved to the rightmost end at first. 
This process is then continued to find the second largest and place it and so on until the data is sorted.


--> Bubble sort is easy to understand and implement.
--> It does not require any additional memory space.
-->It is a stable sorting algorithm, meaning that elements with the same key value maintain their relative order in the sorted output.
--> Bubble sort takes minimum time (Order of n) when elements are already sorted.
--> Yes, the bubble sort algorithm is stable.
--> Due to its simplicity, bubble sort is often used to introduce the concept of a sorting algorithm. In computer graphics, it is popular 
for its capability to detect a tiny error (like a swap of just two elements) in almost-sorted arrays and fix it with just linear complexity 
(2n). 

--> Bubble sort has a time complexity of O(N2) which makes it very slow for large data sets.
--> Bubble sort is a comparison-based sorting algorithm, which means that it requires a comparison operator to determine the relative order
of elements in the input data set. It can limit the efficiency of the algorithm in certain cases.

// code
  void bubbleSort(int arr[], int n)
    {
        // Your code here 
        for(int i=0;i<n-1;i++){
             for(int j=0;j<n-i-1;j++)
              {
                if(arr[j]>arr[j+1]){
                    swap(arr[j],arr[j+1]);
                }
                
            }
        }
    }

//optimised code
void bubbleSort(int arr[], int n)
{
    int i, j;
    bool swapped;
    for (i = 0; i < n - 1; i++) {
        swapped = false;
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
                swapped = true;
            }
        }
  
        // If no two elements were swapped
        // by inner loop, then break
        if (swapped == false)
            break;
    }
}

// recursive aaproach
 void bubble(int arr[], int n)
    {
        // Your code here  using recursion
        
        for(int i=0;i<n-1;i++)
        {
            if(arr[i]>arr[i+1])
            {
                swap(arr[i],arr[i+1]);
            }
        }
    }
     void bubbleSort(int arr[], int n){
        if(n<2)
         return;
        bubble(arr,n);
        bubbleSort(arr,n-1);
        }
